eksctl create cluster --name=observability \
                      --region=us-east-1 \
                      --zones=us-east-1a,us-east-1b \
                      --without-nodegroup
                      

eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster observability \
    --approve


eksctl create nodegroup --cluster=observability \
                        --region=us-east-1 \
                        --name=observability-ng-private \
                        --node-type=t3.medium \
                        --nodes-min=2 \
                        --nodes-max=3 \
                        --node-volume-size=20 \
                        --managed \
                        --asg-access \
                        --external-dns-access \
                        --full-ecr-access \
                        --appmesh-access \
                        --alb-ingress-access \
                        --node-private-networking

# Update ./kube/config file
aws eks update-kubeconfig --name observability



helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update


kubectl create ns monitoring

cd day-2

helm install monitoring prometheus-community/kube-prometheus-stack \
-n monitoring \
-f ./custom_kube_prometheus_stack.yml

nohup kubectl port-forward svc/prometheus-operated -n monitoring 9090:9090 > /dev/null 2>&1 &      SO THAT IT CAN RUN IN BACKGROUND
nohup kubectl port-forward svc/monitoring-grafana -n monitoring 8080:80 > /dev/null 2>&1 &


do kubectl get svc        you will get services like grafana alertmanager or prometheous 
pick ip or exporter and port number 
go inside node by session manager
do curl ip:port/metrics              suppose its kube-state-metrics then you can also filter  curl ip:port/metrics 


kubectl run busybox-crash --image=busybox -- /bin/bash -c "exit 1"      this will crash infinit so that we can check restart count
by firing promql 
kube_pod_container_status_restarts_total{namespace="default"}
kube_pod_container_status_restarts_total {} for all ns
count(kube_configmap_info{namespace="monitoring"})     how many configmap created in monitoring ns
count(kube_configmap_info)
kube_configmap_created{namespace="monitoring"}    no useful but show created configmap
count(kube_secret_info{namespace="monitoring"})    secret
count(kube_secret_info)      to check no of secret created in all ns
kube_pod_status_phase{namespace="default", phase="Running"}  
count(kube_pod_status_phase{namespace="default", phase="Running"})  how many pod are running in running phase in given ns
count(kube_pod_status_phase{phase="Running"})    how many running pods are running in all ns




now first when we install prometheous




